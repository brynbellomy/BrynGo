%YAML 1.2
---
name: BrynGo
file_extensions: [go]
scope: source.go

variables:
  IDENT: '[a-zA-Z_\$][a-zA-Z0-9_\$]*'
  OBJECT_TYPES: 'class|struct|enum|protocol'
  ACCESS_CONTROL_MODIFIERS: 'public|internal|private|(?:internal|private)\s*(set)'

contexts:
  # prototype:
    # - include: comments
    # - include: literals
    # - include: variable-declaration
    # - include: builtins
    # - include: keywords
    # - include: operators

  main:
    # - include: imports
    - include: comments
    - include: keywords
    - include: package-declaration

    - match: (?=\bimport\s+")
      push: import-statement
    - match: (?=\bimport\s+\()
      push: import-block

    - match: (?=\bvar\s+{{IDENT}}\b)
      push: variable-declaration
    - match: (?=\bvar\s+\()
      push: variable-block


  #
  # top-level stuff (imports, package declaration)
  #

  package-declaration:
    - match: ^(package) (.*)$
      captures: { 1: keyword.declaration.package.go, 2: entity.name.package.go }

  imports:
    - match: (?=\bimport\s+")
      push: import-statement
    - match: (?=\bimport\s+\()
      push: import-block
    - match: (?<=$)
      pop: true

  import-statement:
    - meta_scope: meta.import.statement.go

    - include: string-literal
    - match: \b(import)\s+
      captures: { 1: keyword.import.go }

    - match: \s|$
      pop: true

  import-block:
    - meta_scope: meta.import.block.go

    - match: \b(import)\s+(\()
      captures:
        1: keyword.import.go
        2: punctuation.definition.import.go

    # - include: string-literal
    - include: import-block-line

    - match: '\)'
      scope: punctuation.definition.import.go
      pop: true

  import-block-line:
    - match: >-
        (?x)
          ^ [\s\t]* |
          ([a-zA-Z0-9_]+[\s\t]+)? |
          ("[a-zA-Z0-9_\-\./]+") |
          [\s\t]*$
      captures:
        1: entity.name.package.imported.go
        2: string.url.package.go



  #
  # variables
  #

  variable-declaration:
    - meta_scope: meta.variable.declaration.go
    - match: >-
        (?x)                    # ignore comments
          (var)       [\s\t]+ |
          ({{IDENT}}) [\s\t]+ |
      captures:
        1: keyword.declaration.variable.go
        2: variable.declaration.go

  variable-block:
    - match: >-
        (?x)                    # ignore comments
          (var)[\s\t]+ |
          (\()         |
      captures:
        1: keyword.declaration.variable.go
        2: punctuation.definition.variable.go
      push:
        - match: \b({{IDENT}})\b
          captures: { 1: entity.name.variable.go }
        - match: (\))
          captures: {1: punctuation.definition.variable.go}
          pop: true




  #
  # comments
  #

  comments:
    - meta_include_prototype: false
    - match: \/\/+
      push: line-comment
    - match: \/\*
      push: block-comment

  comment-keywords:
    - match: \b(@@TODO)\b
      captures: { 1: keyword.comment.todo.go }

  line-comment:
    - meta_scope: comment.line.go
    - include: comment-keywords
    - match: (?<=$)
      pop: true

  todo-comment:
    - scope: comment.line.todo.go
      match: (//)\s*MARK:\s*(.*)$
      captures:
        1: punctuation.definition.comment.line.double-slash.go
        2: meta.identifier.section.go

  block-comment:
    - meta_scope: comment.block.go
    - include: comment-keywords
    - match: \*\/
      pop: true

  #
  # literals
  #

  literals:
    - meta_include_prototype: false
    - include: string-literal
    - include: numeric-literal
    - match: \b(nil)\b
      scope: constant.nil.literal.go

  numeric-literal:
    - match: \b[0-9]+\b
      scope: constant.numeric.literal.go

  string-literal:
    - match: (["'])
      scope: punctuation.definition.string.quoted.begin.go
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.go
        - match: \n
          scope: invalid.illegal.newline.go
          pop: true
        - match: \1
          scope: punctuation.definition.string.quoted.end.go
          pop: true
        - include: string-content

  string-content:
    # https://mathiasbynens.be/notes/javascript-escapes
    - match: \\\s*\n
      scope: constant.character.escape.newline.go

    - match: \\([1-7][0-7]{0,2}|[0-7]{2,3}|[bfnrtv0'"\\]|x\h{2}|u\{\h+\}|u\h{4})
      scope: constant.character.escape.go

  builtins:
    - include: builtin-types
    - include: builtin-functions

  builtin-types:
    - match: \b(string|u?int(8|16|32|64)?|float(8|16|32|64)?|map|chan)\b
      scope: entity.name.type.go

  builtin-functions:
    - match: \b(make|append|delete|copy|new|close|panic)\b
      scope: support.function.builtin.go

  keywords:
    - match: \b(interface|struct)\b
      scope: keyword.declaration.type.go
    - match: \b(func)\b
      captures: { 1: keyword.declaration.function.go }
    - match: \b(switch|select|case|default|continue|break|return|defer|go|if|else)\b
      scope: keyword.control.go

  operators:
    - match: >-
        (?x)
          !(?!=)| # logical-not     right-to-left   right
          &&    | # logical-and     left-to-right   both
          \|\|  | # logical-or      left-to-right   both
      scope: keyword.operator.logical.go

    - match: >-
        (?x)
          :?=(?!=)| # assignment      right-to-left   both
      scope: keyword.operator.assignment.go

    - match: >-
        (?x)
          %=   | # assignment      right-to-left   both
          &=   | # assignment      right-to-left   both
          \*=  | # assignment      right-to-left   both
          \+=  | # assignment      right-to-left   both
          -=   | # assignment      right-to-left   both
          /=   | # assignment      right-to-left   both
          \^=  | # assignment      right-to-left   both
          \|=  | # assignment      right-to-left   both
          <<=  | # assignment      right-to-left   both
          >>=  | # assignment      right-to-left   both
          >>>= | # assignment      right-to-left   both
      scope: keyword.operator.assignment.augmented.go

    - match: >-
        (?x)
          ~    | # bitwise-not     right-to-left   right
          <<   | # bitwise-shift   left-to-right   both
          >>>  | # bitwise-shift   left-to-right   both
          >>   | # bitwise-shift   left-to-right   both
          &    | # bitwise-and     left-to-right   both
          \^   | # bitwise-xor     left-to-right   both
          \|     # bitwise-or      left-to-right   both
      scope: keyword.operator.bitwise.go

    - match: >-
        (?x)
          <=   | # relational      left-to-right   both
          >=   | # relational      left-to-right   both
          <    | # relational      left-to-right   both
          >      # relational      left-to-right   both
      scope: keyword.operator.relational.go

    - match: >-
        (?x)
          !==  | # equality        left-to-right   both
          ==   | # equality        left-to-right   both
          !=     # equality        left-to-right   both
      scope: keyword.operator.comparison.go

    - match: >-
        (?x)
          --   | # decrement       n/a             right-or-left
          \+\+ | # increment       n/a             right-or-left
          /    | # division        left-to-right   both
          %    | # modulus         left-to-right   both
          \*   | # multiplication  left-to-right   both
          \+   | # addition        left-to-right   both
          -      # subtraction     left-to-right   both
      scope: keyword.operator.arithmetic.go

    - match: (?<!\.)\.\.\.
      scope: keyword.operator.spread.go

